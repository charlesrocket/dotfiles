(defwindow bar
  :monitor 0
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  (bar))

(deflisten window_title "sh ~/.config/eww/scripts/get-window-title")
(deflisten workspaces :initial
  "[]" "~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial
  "1" "~/.config/eww/scripts/get-active-workspace")

(defpoll network_info :interval "5s" "~/.config/eww/scripts/get-network")
(defpoll battery_info :interval "5s" "~/.config/eww/scripts/get-battery")
(defpoll time :interval "10s" "date '+%H:%M'")  
(defpoll date :interval "1m" "date '+ %d %B %Y'")

(defvar clock_rev false)
(defvar network_rev false)

(defwidget bar []
  (box :orientation "h"
       :class "main-bar"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :class "left-bar"
       :halign "start"
       :valign "fill"
    (workspaces)))

(defwidget center []
  (box :class "center-bar"
       :halign "center"
       :valign "fill"
    (window)))

(defwidget right []
  (box :halign "end"
       :space-evenly false
       :class "right-bar"
    (stats)
    (separator)
    (network)
    (separator)
    (clock)))

(defwidget window []
  (box :halign "center"
    (label :text {window_title == "" ? "" :
                  window_title == "null" ? "" : window_title }
           :limit-width 65)
  ))

(defwidget clock []
  (eventbox :onhover "${EWW_CMD} update clock_rev=true"
            :onhoverlost "${EWW_CMD} update clock_rev=false"
    (box :space-evenly false
         :class "clock"
         :spacing 10
      (label :text time)
        (revealer :transition "slideleft"
                  :reveal clock_rev
                  :duration "600ms"
          (date)))))

(defwidget date []
  (box
    (label :text date)))

(defwidget stats []
  (box :class "stats"
       :orientation "h"
       :halign "end"
    (metric :label ""
            :label-class "stats-cpu"
            :value {EWW_CPU.avg}
            :tooltip "Avg. ${round(EWW_CPU.avg, 3)}"
            :onchange "")
    (metric :label ""
            :label-class "stats-ram"
            :value {EWW_RAM.used_mem_perc}
            :tooltip "${round(EWW_RAM.used_mem_perc, 0)}% used"
            :onchange "")
    (metric :label ""
            :label-class "stats-disk"
            :value
              {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :tooltip "${round(EWW_DISK['/'].used_perc, 0)}% used"
            :onchange "")
    (metric :label "${battery_info.stat == "ac" ? "" : ""}"
            :label-visible {battery_info.source == "battery" ? true : false}
            :label-class "${battery_info.message == "critical" ?
              "stats-batt-low" : ""} ${battery_info.message == "charged" ?
              "stats-batt-charged" : ""}"
            :value {battery_info.percentage}
            :tooltip {battery_info.time}
            :visible {battery_info.source == "battery" ? true : false}
            :onchange "")))

(defwidget workspaces []
  (box :space-evenly false
       :spacing 5
       :class "workspaces"
    (for workspace in workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box :class "workspace-entry ${workspace.id == current_workspace ?
            "workspace-current" : "workspace-inactive"} ${workspace.windows > 0 ?
            "workspace-occupied" : "workspace-empty"}"
          (label :text "${workspace.name}")
          )
        )
      )
    )
  )

(defwidget network_stats []
  (box :class "network-stats"
       :spacing 10
       :vexpand false
       :hexpand false
    (label :text " ${round(EWW_NET["${network_info.if_name}"].NET_DOWN / 1000000, 4)}")
    (label :text " ${round(EWW_NET["${network_info.if_name}"].NET_UP / 1000000, 4)}")))

(defwidget network []
  (eventbox :onhover "${EWW_CMD} update network_rev=true"
            :onhoverlost "${EWW_CMD} update network_rev=false"
    (box :class "network"
         :vexpand false
         :hexpand false
         :spacing 10
         :space-evenly false
      (label :text "${network_info.vpn == "active" ? "" : ""}"
             :class "${network_info.status == "online" ?
               "network-online" : "network-offline"}")
      (label :text "${network_info.interface}")
        (revealer :transition "slideleft"
                  :reveal network_rev
                  :duration "600ms"
          (network_stats)))))

(defwidget metric [
  label label-class value tooltip ?visible ?label-visible onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly true
    (box :visible label-visible
         :class label-class label)
    (scale :min 0
           :max 101
           :orientation "v"
           :flipped true
           :active {onchange != ""}
           :value value
           :tooltip tooltip
           :visible visible
           :onchange onchange)))

(defwidget separator []
  (box
    (label :text "|"
           :class "separator")))
